function smallestCommons(arr) {
  let newArr = arr.sort((a, b) => a - b);
  // let found = false;
  // let counter = 1;
  // let newArr = arr.sort((a, b) => a - b);
  // while (found == false) {
  //   if (counter % arr[0] == 0 && counter % arr[1] == 0) {
  //     found = true;
  //   } else {
  //     counter += 1;
  //   }
  // }

  // let multiplier = 1;
  // let newBool = true
  // while(newBool) {
  //   let passing = true;
  //   for (let i = arr[0]; i <= arr[1]; i++) {
  //     if ((counter * multiplier) % i > 0) {
  //       passing = false;
  //     }
  //   }
  //   if (passing) {
  //     return (counter * multiplier);
  //   }
  //   multiplier += 1;
  // }
  // return arr;
  function findLCM(arr) {
    let counter = 1;
    let searching = true;
    while(searching) {
      if (counter % arr[0] == 0 && counter % arr[1] == 0)
      {
        searching = false;
        return(counter);
      } else {
        counter += 1;
      }
    }
  }

  let lcm = findLCM(newArr);
  let multiplier = 1;
  let searching = true;
  while(searching) {
    let passing = true;
    for (let i = newArr[0]; i <= newArr[1]; i++) {
      if ((lcm * multiplier) % i > 0) {
        passing = false;
      }
    }
    if (passing) {
      return (lcm * multiplier);
    }
    multiplier += 1;
  }
  return;
} //before finishing rewrite to use nested functions, particularly for finding the intial lcm

smallestCommons([1,5]);